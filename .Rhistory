for(i in id){
x<-sum(complete.cases(read.csv(files[i])))
nobs<-x
data<- data.frame(id,nobs)
}
data
}
library(swirl)
ls()
list(ls())
rm(list)
rm(list(lm()))
rm(list=ls())
swirl()
my_vector<-c[1:20]
my_vector<-c(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,4,5)
identical()
identical(my_matrix,my_matrix2)
patients<-c('Bill', 'Gina','' Kelly'','Sean')
patients<-c("Bill", "Gina','' Kelly'',"Sean"")
patients<-c("Bill", "Gina","Kelly","Sean)
0
)
)
""
""
patients<-c ("Bill", "Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class()
class(my_data)
cnames<-c("patient", "age", "weight","bp", "rating", "test")
colnames(cnames)
colnames(my_data)<-cnames
my_data
true==true
==
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
!5==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE |c(TRUE, FALSE, FALSE).
TRUE |c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all()
all(ints>0)
library(swirl)
ls()
rm(list=ls())
swirl()
head(flags)
dim(flags)
viewinfo()
viewinfo(flags)
class(flags)
as.list(flags
)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
cls_list
as.character(cls_list)
cls_vect<-sapply(flags,class)
class(cls_vect)
flags$orange
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply((flag_colors,sum)
sapply((flag_colors)
)
sapply((flag_colors)
)
sapply(flag_colors)
sapply()
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shape,range)
lapply(flag_shapes, range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6)
)
unique_vals<-lapply(flags,unique)
unique_vals
length(unique_vals)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
1
swirl()
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags, class, character(1))
?tappy
?tapply
flags$landmass
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$polpulation,flags$landmass,summary)
tapply(flags$population, flags$landmass, summary)
ls()
ls(plants)
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
sample()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20,10,replacemet=false)
sample(1:20,10,replace=FALSE)
sample(1:20, 10)
LETTERS
sample("LETTERS",29,replace=TRUE)
sample(letters)
sample(LETTERS)
flips<-sample(c(0,1),100,replace=TRUE,prob = c(0.3, 0.7))
flips
sum(flips[1])
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2<- rbinom(c(0,1),100,0.7)
flips2<- rbinom(n=0,1,size=1,probability=0.7)
flips2<- rbinom(n=100,size=1,prob=0.7)
flip2
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
?rpois
rpois()
rpois(5,10)
my_pois<-replicate(100, rpois(5, 10))
my_pois
cm<-colmeans(my_pois)
cm<-colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.date("1969-01-01")
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-sys.time()
t1<-Sys.time()
t1
class()
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekday(d1)
weekdays(d1)
months(t1)
quarters(t1)
quarters(t2)
t3<-c("October 17, 1986 08:24")
t3<-"October 17, 1986 08:24"
strptime(t3,"%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
library(swirl)
install_from_swirl("R Programming Alt")
swirl()
exit()
bye()
library(swirl)
install_from_swirl("Data Analysis")
swirl()
library(swirl)
install_from_swirl("Regression Models")
library(swirl)
install_from_swirl("Statistical Inference")
exit()
bye()
library(swirl)
swirl()
nxt()
nxt()
cars
cars$mrgcity
cars$mpgCity
myMPG<-cars$mpgCity
mean(myMPG)
median(myMPG)
table(myMPG)
mode(myMPG)
19
range(cars$price)
dif(range(cars$price))
sum(range)
61.9-7.4
var(cars$price)
sd(cars$price)
nxt()
nxt()
20
10
25
nxt()
1
4
summary(cars$price)
mtcars
allMPG <- mtcars$mpg
allMPG
mean(allMPG)
sampMeanMpg<-  mean(allMPG)
sampVarMPG<-var(alllMPG)
sampVarMPG<-var(allMPG)
n<- length(allMPG)
tStat <- (sampMeanMPG - 12.0)/ sqrt(sampVarMPG/n)
myDF <- n-1
tStat
myDF
pVal1 <- pt(tStat, df = myDF,lower.tail=FALSE)
pVal <- pVal1 * 2
pVal
t.test(allMPG, mu=12.0, alternative="two.sided")
libray(swirl)
swirl
library(swirl)
swirl()
am
ls(am)
mtcars
mtcars$am
auto<-mtcars[mtcars$am==0]
mtcars[mtcars$am==0, ]
man<- mtcars[mtcars$am==1,]
auto<-mtcars[mtcars$am==0,]
autoMPG <- auto$mpg
manMPG <- man$mpg
sampMeanAutoMPG<-mean(autoMPG)
sampMeanmanMPG<-mean(manMPG)
diffSampMean <- sampMeanmanMPG-sampMeanAutoMPG
diffPopMean <-0
sampVarAutoMPG <- var(autoMPG)
sampVarManMPG <- var(manMPG)
nAuto <-length(autoMPG)
nMan <-length(manMPG)
diffSampMean-diffPopMean
sub(diffSampMean-diffPopMean)
numer<- diffSampMean-diffPopMean
denom <- sqrt(sampVarManMPG/nMan + sampVarAutoMPG/nAuto)
tStat <- numer/denom
myDF <-(sampVarManMPG/nMan + sampVarAutoMPG/nAuto)^2 / ((sampVarManMPG/nMan)^2/(nMan - 1) +(sampVarAutoMPG/nAuto)^2/(nAuto - 1))
tStat
myDF
pVal1<-pt(tstat,myDF,Lower.tail=FALSE)
pVal1<pt(tStat,pt>myDF, lower.tail=FALSE)
pVal1<-pt(tStat,pt>myDF, lower.tail=FALSE)
pVal1
pt?
)
?pt
pVal1<-pt(tStat,myDF, lower.tail=FALSE)
pVal<- pVal1*2
pVal
t.test(pVal)
t.test
t.test(autoMPG, manMPG, alternative="two.sided")
library(swir)
library(swirl)
swirl()
sigma<- 10
delta<- 5
zAlpha <- qnorm(.095)
qnorm(0.95)
zAlpha <-1.644854
zBeta <- qnorm (.20)
(sigma / delta)^2 * (zAlpha - zBeta)^2
effectSize <- c(delta/sigma)
pwr.norm.test(d=effectSize, sig.level=0.05, power=0.80,alternative="greater")
pwr.t.test(d=effectSize, sig.level=0.05, power=0.80, type="one.sample",alternative="greater")
y<-100
cars$type
sqrt(y)
z<-sqrt(y)
?sqrt
cars
20
10
range(cars$price)
sum(cars$price)
1079.6/54
'mean(cars$price)
''
)
''
mean(cars$price)
mpg.midsize
sort(mpg.midsize)
mpg.sorted <-mpg.sorted
mpg.sorted <-sort(mpg.midsize)
19
median(mpg.midsize)
summary(cars$mpgCity)
25
19
20
sd(mpg.midsize)
1.89554^2
24
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv" )
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile="getdata%2Fdata%2Fss06hid.csv",method='wb' )
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile="getdata%2Fdata%2Fss06hid.csv" )
dat<-read.csv(""getdata%2Fdata%2Fss06hid.csv")
dat<-read.csv("getdata%2Fdata%2Fss06hid.csv")
?strsplit
names(dat)
strsplit(names(dat[123]),"wgpt")
strsplit(names(dat[123]),"wgtp")
wgtp
dat$wgtp
dat<-read.csv(""./data/gdp.csv")
dat<-read.csv("./data/gdp.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ",destfile="getdata%2Fdata%2FGDP.csv" )
dat<-read.csv("getdata%2Fdata%2FGDP.csv")
?gsub
dat$gdpData
dat
cls<-gsub(",","",gdpData[5:194,5])
names(dat)
cls<-gsub(",","",Gross.domestic.product.2012[1:10,2])
dat$Gross.domestic.product.2012
cls<-gsub(",","",Gross.domestic.product.2012[1:10,2])
View(dat)
gdp<-read.csv("getdata%2Fdata%2FGDP.csv",skip=4,nrows=190)
clean<-gsub(",","",gdp$X.4)
g<-as.numeric(clean)
mean(g)
View(gdp)
View(attach(gdp))
attah(gdp)
attach(gdp)
c<-attach(gdp)
View(c)
gdp
View(gdp)
grep("^United",gdp$X.3)
length(grep("^United",gdp$X.3))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv",destfile="getdata%2Fdata%2FEDSTATS_Country.csv")
edu<-read,csv("getdata%2Fdata%2FEDSTATS_Country.csv")
edu<-read.csv("getdata%2Fdata%2FEDSTATS_Country.csv")
View(edu)
mg<-merge(gdp,edu,by.x="X",by.y="CountryCode")
jn<-grep("Fiscal year end: June 30",mg%Special.Notes)
jn<-grep("Fiscal year end: June",mg%Special.Notes)
jn<-grep("Fiscal year end: June 30",mg$Special.Notes)
length(jn)
names(mg)
tolower(names(mg))
library(quantmod)
install.packages("quantamod")
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
length( sampleTimes)
sampleTimes
year(sampleTimes)
nn<-year(sampleTimes)==2012
y212<-grep("2012-*",sampleTimes)
table(y212)
length(y212)
?strptime
library("strptime")
sd<-subset((sampleTimes, y212)
sd<-subset(sampleTimes, y212)
?subset
View(sampleTimes )
source("run_analysis.R")
source("run_analysis")
setwd("C:/Users/user/Desktop/peer assign")
joinsub
source("run_analysis.R")
head(cleandata)
summary(cleandata)
names(cleandata)
subjectLen <- length(table(joinSub))
subjectLen <- length(table(joinsub))
View(joinsub)
subjectLen
table(joinsub)
head(joinsub)
activityLen <- dim(act)[1]
activityLen
dim(act)
head(act)
View(table(joinsub))
columnLen <- dim(cleandata)[2]
dim(cleandata)
result <- matrix(NA, nrow=subjectLen*activityLen, ncol=columnLen)
result
result <- as.data.frame(result)
result
colnames(result) <- colnames(cleandata)
colnames(cleandata)
row <- 1
result[row, 1] <- sort(unique(joinsub)[, 1])[i]
result[row, 1] <- sort(unique(joinsub)[, 1])
View(joinsub)
unique(joinSubject)[, 1]
unique(joinsub)[, 1]
View(act)
View(cleandata)
for(i in 1:subjectLen) {
for(j in 1:activityLen) {
result[row, 1] <- sort(unique(joinsub)[, 1])[i]
result[row, 2] <- act[j, 2]
bool1 <- i == cleandata$subject
bool2 <- act[j, 2] == cleandata$activity
}
}
cleandata[bool1&bool2, 3:columnLen]
head(cleandata[bool1&bool2, 3:columnLen])
dim(cleandata[bool1&bool2, 3:columnLen])
3:columnLen
columnLen
bool1&bool2
head(bool1&bool2)
cleanedData[bool1&bool2, 3:columnLen]
cleanedata[bool1&bool2, 3:columnLen]
cleandata[bool1&bool2, 3:columnLen]
head(cleandata)
col?Means
?colMeans
head(result)
head(result)
write.table(result, "data_with_means.txt")
View(result)
for(i in 1:subjectLen) {
for(j in 1:activityLen) {
result[row, 1] <- sort(unique(joinsub)[, 1])[i]
result[row, 2] <- act[j, 2]
bool1 <- i == cleandata$subject
bool2 <- act[j, 2] == cleandata$activity
result[row, 3:columnLen] <- colMeans(cleanedData[bool1&bool2, 3:columnLen])
row <- row + 1
}
}
for(i in 1:subjectLen) {
for(j in 1:activityLen) {
result[row, 1] <- sort(unique(joinsub)[, 1])[i]
result[row, 2] <- act[j, 2]
bool1 <- i == cleandata$subject
bool2 <- act[j, 2] == cleandata$activity
result[row, 3:columnLen] <- colMeans(cleandata[bool1&bool2, 3:columnLen])
row <- row + 1
}
}
head(result)
write.table(result, "data_with_means.txt")
data <- read.table("./data_with_means.txt")
data[1:12, 1:3]
